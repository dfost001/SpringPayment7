package model.customer;
// Generated Jun 8, 2015 7:04:12 PM by Hibernate Tools 4.3.1


import error_util.EhrLogger;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;


/**
 * Customer generated by hbm2java
 */
@Entity
@Table(name="customer"
    ,catalog="sakila_2"
)
public class Customer extends PostalAddress implements java.io.Serializable {

    @Id @GeneratedValue(strategy=IDENTITY)    
    @Column(name="customer_id", unique=true, nullable=false)
     private Short customerId;   
    
    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="store_id", nullable=false)    
     private Store store;      
    
    
     @Column(name="active", nullable=false)
     private boolean active;    
    
    @OneToMany(mappedBy="customerId",cascade=CascadeType.ALL,
            fetch=FetchType.EAGER, targetEntity=ShipAddress.class)
    private List<ShipAddress> shipAddressList ;

    public Customer() {
    }  
    
    public Short getCustomerId() {
        return this.customerId;
    }
     
    public void setCustomerId(Short customerId) {
        this.customerId = customerId;
    }  
  
    
    public Store getStore() {
        return this.store;
    }
    
    public void setStore(Store store) {
        this.store = store;
    }     
   
    public boolean getActive() {
        return this.active;
    }
    
    public void setActive(boolean active) {
        this.active = active;
    }  

    public List<ShipAddress> getShipAddressList() {
        if(shipAddressList == null)
            shipAddressList = new ArrayList();
        return shipAddressList;
    }

    public void setShipAddressList(List<ShipAddress> shipAddress) {
        this.shipAddressList = shipAddress;
    }
    
    public void removeShipAddress(ShipAddress shipAddress) {
        
        ShipAddress found = null;
        
       for (ShipAddress ship : this.getShipAddressList()) {
           if(ship.getShipId().equals(shipAddress.getShipId())) {
               found = ship;
               break;
           }
       }
       
       if(found == null)
           throw new IllegalArgumentException(
                   EhrLogger.doError(this.getClass().getCanonicalName(), 
                           "removeShipAddress", "@OneToMany list does NOT contain shipAddress")
           );
       
        found.setCustomerId(null);
       
        this.getShipAddressList().remove(found);
        
        //shipAddress.setCustomerId(null);
    }
    
}


